// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../_hardcoded/middleware.go (786B)

package hardcoded

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __hardcodedMiddlewareGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x41\x8b\xdc\x3c\x0c\x3d\xc7\xbf\x42\xe4\x63\xf9\xec\x12\x92\xfb\xc2\x9c\xca\x2e\x7b\x29\x2c\xdd\x81\x3d\x7b\x1d\x25\x31\x93\xd8\xa9\x2c\x4f\x3a\x94\xf9\xef\x45\xc9\xcc\x74\xa7\xd0\x43\x8c\xfc\xf4\xf4\xe4\xa7\x68\xb6\xee\x60\x7b\x84\x84\x74\x44\x52\xca\x4f\x73\x24\x06\xad\x8a\xb2\x9b\xb8\x54\x45\x19\x90\x9b\x81\x79\x96\x98\x72\x60\x3f\x61\xd3\xe2\x47\xee\x4b\xa5\x8a\xb2\xf7\x3c\xe4\x8f\xda\xc5\xa9\x49\x9e\xf2\x9c\x30\x34\x63\xec\x29\xa7\x52\x19\xa5\x9a\x06\x5e\x6d\xf0\xee\x9b\x6f\xdb\x11\x17\x4b\x08\x63\xec\x13\xd8\x70\x82\x59\x12\xa9\x86\xe7\x48\x10\xe2\x52\xc1\x82\xff\x13\x82\x8b\x81\x7d\xc8\x08\x3c\x50\x5c\x7c\xe8\x81\x07\xdc\xc8\x90\x67\x51\x94\x7b\x62\xeb\x0e\x90\x22\xf0\xe0\x13\x4c\xf6\x04\x8e\x6c\x1a\x36\x2e\x45\x87\x29\xd5\xaa\xcb\xc1\xfd\xdd\x5f\x0f\x20\x6e\xea\x17\x1b\xda\x11\xc9\xdc\xdd\xe0\x97\x2a\x08\x39\x53\xb8\x83\x9f\x73\x70\x5a\xc4\xf4\xb2\xe1\xdf\x31\xcd\x31\x24\x7c\x27\xcf\x48\x15\x10\x7c\xb9\xe0\x3f\x32\x26\x36\xa2\x53\xb4\xd8\x21\xc1\x5a\xb6\x01\xc5\x6a\xe2\x89\x08\x1e\x77\x40\xe8\xe2\x11\x49\x1b\x49\xf8\x0e\x6e\xb9\xdd\x0e\x82\x1f\xb7\x82\xcb\x63\x24\x3c\xcb\x71\xb4\x04\x48\xeb\x17\x49\x09\x92\x16\xcf\x6e\x80\xcf\xca\xd7\xb8\xd6\x7c\x9a\xf1\xd2\xda\xd9\x24\x43\x23\x1f\xfa\xc7\x55\x59\x64\x76\xd0\x4d\x5c\x3f\x89\x58\xa7\xaf\x65\xe6\x46\x5f\xbb\x7c\x66\x5f\x29\x02\xb5\xd8\xd9\x3c\xf2\x3f\xc4\xca\x1c\x0e\x21\x2e\xe1\xf2\xdf\x1e\xfe\x3b\x42\xec\x40\xde\x03\x0f\xfb\xb2\xba\x29\xfd\x89\xcc\x66\x52\xce\x6d\x7f\xea\x77\xcf\xc3\xd7\x18\x18\x7f\xb2\xa6\xfa\x1a\x19\xb3\xf5\xd0\xe5\x5a\x59\x56\xf2\xcc\xea\x62\x4d\xaf\x8b\x59\xbf\xc9\x72\x68\x63\xcc\x6d\xe8\x77\xee\xce\xeb\xd0\x87\xfa\x4d\x76\xfe\x65\xbf\x7f\xd5\x4b\x05\x92\x39\x1b\x75\x56\xbf\x03\x00\x00\xff\xff\x67\x37\x20\x98\x12\x03\x00\x00")

func _hardcodedMiddlewareGoBytes() ([]byte, error) {
	return bindataRead(
		__hardcodedMiddlewareGo,
		"../_hardcoded/middleware.go",
	)
}

func _hardcodedMiddlewareGo() (*asset, error) {
	bytes, err := _hardcodedMiddlewareGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../_hardcoded/middleware.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x58, 0xea, 0xc3, 0x7, 0x64, 0xa2, 0x50, 0x5a, 0x3, 0xc7, 0xf6, 0xf4, 0xb6, 0x49, 0x36, 0x2b, 0x43, 0x2b, 0x73, 0xcc, 0x6, 0x96, 0xdf, 0x6c, 0x8c, 0xba, 0x96, 0xea, 0xf0, 0xa3, 0x74}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../_hardcoded/middleware.go": _hardcodedMiddlewareGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"_hardcoded": {nil, map[string]*bintree{
			"middleware.go": {_hardcodedMiddlewareGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
